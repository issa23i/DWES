
clase DB (base de datos)
    CLASE ESTÁTICA
    MÉTODOS
        OBTIENE_FAMILIAS() -- (DEVUELVE ARRAY TODAS LAS FAMILIAS DE LA BBDD)
        OBTIENE_PRODUCTOS(FAMILIA) -- (DEVUELVE ARRAY TODOS LOS PRODUCTOS DE LA FAMILIA PASADA POR PARÁMETRO)
        OBTIENE_PRODUCTO(COD_PRO) -- (DEVUELVE EL OBJETO PRODUCTO)
        VERIFICA_CLIENTE(USUARIO,PASSWORD) -- (DEVUELVE BOOLEANO SI LOGUEA O NO)
        EJECUTA_CONSULTA() -- PRIVADA 
        OBTIENETV(COD) PUBLICO Y ESTATICO -- (DEVUELVE UN OBJETO TV)


clase FAMILIA
    ATRIBUTOS
        CÓDIGO
        NOMBRE
    CONSTRUCTOR
        ARRAY FILA FAMILIA DE LA BBDD 
    MÉTODOS GETTERS Y SETTERS
        


hecho 
clase PRODUCTO 
    ATRIBUTOS PROTECTED
        CÓDIGO
        NOMBRE
        NOMBRE_CORTO
        PVP
        CODIGO FAMILIA
    CONSTRUCTOR
        ARRAY FILA PRODUCTO DE LA BBDD
    MÉTODOS
        MOSTRAR_NOMBRE
    MÉTODOS GETTERS
    
 
hecho       
clase PRODUCTO_DETALLE (Ejemplo TV) hija PRODUCTO (extends)
    ATRIBUTOS
        pulgadas
        panel
    CONSTRUCTOR
        Padre
        Array(cod_pro => codigo, pulgadas => x , resolucion => x, panel => x)
    GETTERS 
    

clase CESTACOMPRA
    ATRIBUTOS 
        ARRAY PRODUCTOS Y UNIDADES
    METODOS
        CARGA_ARTÍCULO(COD_PRO , UNIDADES) -- (CARGA EN LA CESTA THIS EL ARTÍCULO , SI EXISTE, SUMA LAS UNIDADES
        GET_PRODUCTOS() -- DEVUELVE UN ARRAY CON LA CESTA THIS KEY COD - VALUE PRODUCTO (OBJETO), unidades
        GET_COSTE() -- DEVUELVE UN ENTERO CON EL TOTAL DE LA CESTA
        GET_FAMILIA(COD_PRO) -- DEVUELVE EL CODIGO DE FAMILIA
        ELIMINAR_PRODUCTO(COD_PRO) -- BORRA UN ARTÍCULO DE LA CESTA THIS
            Lo primero que debe hacer es comprobar que los parámetros código de producto y unidades a modificar estén presentes en la cesta.  
            Primero comprueba si el código del producto ya existe en el array. Si existe, se resta unidades al valor existente. Si el valor resultante es menor o igual que cero, se elimina ese producto del array.
            Si no existe, no hace nada. Realmente, este caso no debería darse, ya que al script eliminar.php se accede desde los vínculos del propio listado de productos de la cesta. 

        IS_VACIA() -- DEVUEVE BOOLEANO SI LLENA O NO
        GUARDAR_CESTA() -- GUARDA CESTA THIS EN LA SESSION
        CARGAR_CESTA() -- IMPORTA LA CESTA THIS DE LA SESSION, SI NO EXISTE, CREA UNA VACÍA
        

listado_productos.php
    muestra una tabla con todos los productos de una familia, añadiendo a cada fila un formulario para añadir 1 ó más unidades de ese producto a la cesta. El formulario debe contener un botón de envío y campos para las unidades y código del producto (oculto). Al pulsar el botón Añadir, se envían los datos al script anadir.php (sin ñ), el cual se encarga de recoger los datos del formulario y añadir un objeto producto y sus unidades a la cesta. Para ello, llevará a cabo los siguientes pasos:
    Recuperará la cesta de la sesión llamando al método estático carga_cesta() de la clase CestaCompra, el cual devuelve un objeto de la clase CestaCompra (el de la sesión o uno nuevo si no lo hubiera). 
    Llama al método carga_artículo de la cesta, pasándole el código de producto añadido y el número de unidades. Este método de la clase CestaCompra comprueba primero si el código de producto ya existe en la cesta (en el array de productos). Si existe, se suman las unidades al valor existente. Si no existe, se añade el producto junto con sus unidades a la cesta (El producto se crea con el método obtieneProducto de la clase DB, el cual consulta en la BD el valor de sus atributos).
    Una vez añadido el producto y sus unidades, se llama al método guarda_cesta() para que guarde el objeto cesta en la variable de sesión.
    Modifica la página listado_productos.php para convertir los nombres de los productos de ese tipo en enlaces a la página detalle.php, de modo que al hacer clic se muestren los detalles del modelo de producto seleccionado.
    Se obtendrá un array de objetos de la clase Producto para mostrarlos en la página que lista los productos de una determinada familia.

listado_familias.php
    Se obtendrá del modelo un array de objetos de la clase Familia que el controlador pasará a la vista, la cual mostrará en la página el listado de las familias de productos. 

anadir.php
    El script anadir.php no tiene salida, sino que sólo llama a los métodos 
    de la cesta para modificar la variable de sesión y redirige a 
    listado_productos.php (pasando el código de la familia en la URL. 
    Para esto último, se usará el método get_familia de la cesta, 
    al cual se le pasa el código del producto)
    
cesta.php
    De forma similar, a la hora de listar los productos que hay en la cesta 
    junto a sus unidades en la página cesta.php, crea un formulario 
    por cada fila que incluya el número de unidades que se quieren eliminar 
    de ese producto. Al pulsar el botón Eliminar de ese producto, 
    se eliminarán las unidades indicadas. Los datos del formulario 
    (unidades a eliminar y los datos del producto ocultos) 
    se enviarán al script eliminar.php, el cual cargará la cesta, 
    llamará al método elimina_unidades() y guardará la cesta modificada 
    en la variable de sesión llamando al método guarda_cesta() del objeto cesta.

eliminar.php
    Una vez se han eliminado las unidades o, en su caso, el producto de la cesta, 
    el script eliminar.php redirige a la página cesta.php

detalle.php
    Crea una nueva página que muestre información sobre el modelo de producto. 
    Esta información se almacenará en la nueva tabla de la BD. 
    Ten en cuenta que algunos datos estarán almacenados en la tabla producto.
    Por ejemplo, para el tipo de producto TV, habría que crear un método 
    obtieneTV($codigo) público y estático en la clase DB que devuelva 
    una instancia de la clase TV y reciba como parámetro el código del producto. 
    Para generar el objeto TV habría que pasar al constructor un array 
    asociativo cuyas claves sean los nombres de las columnas de las tablas 
    televisor y producto de la BD. En el constructor de TV se deben inicializar 
    los atributos propios de TV y llamar al constructor de 
    la clase padre (Producto) pasándole el mismo array asociativo 
    para establecer el valor de los atributos comunes del producto. 
    Dicho array habría que obtenerlo consultando la BD. 
    En este caso, la tabla televisor tendría también como clave primaria 
    el código del producto, que a la vez sería clave foránea asociada 
    a la columna cod de la tabla producto. Por tanto, habría que usar el mismo 
    código de producto para filtrar los registros en ambas tablas:
    mysql> select t.*, p.nombre, p.nombre_corto, p.PVP, p.familia 
    FROM televisor t, producto p WHERE t.cod=’BRAVIA2BX400’ 
    AND p.cod=’BRAVIA2BX400’;
    (AÑADO: si el producto no es un televisor, no debería mostrar 
        el botón detalle, comprobar si es la clase tv)


TAREAS BBDD
    Elige un tipo de producto (TV, ordenador o videoconsola, por ejemplo), de forma que se muestre a los usuarios información más detallada para ese tipo.
    Incluye una nueva tabla en la BD e inserta algunos datos correspondientes a los productos del tipo elegido. (La nueva tabla tendrá también el código del producto como clave primaria, que será a su vez clave foránea del código en la tabla producto).


recomendaciones
    Se recomienda obtener los datos necesarios como la familia desde las variables de sesión, evitando así consultar de nuevo la BD o ir enviando los datos en campos ocultos de formularios. Define un método de CestaCompra para obtener un objeto Producto a partir del código de un producto de la cesta.
    Siguiendo el patrón MVC (Modelo Vista Controlador), separa la lógica de negocio y los datos de la lógica de presentación (la que genera las etiquetas HTML), de forma que el mantenimiento de la aplicación sea más sencillo. 
    Almacena en el script de la vista (vista_listado_familias.php, vista_listado_productos.php, vista_cesta.php) el código HTML, el cual se incluirá en la página correspondiente mediante require_once. La vista debe contener la cantidad mínimo imprescindible de código PHP (de modo que un diseñador HTML sin conocimientos de PHP pueda entenderla). Las instrucciones PHP que se usarán serán echo, if/else, foreach/endforeach, etc. Además, no se deben incluir instrucciones PHP que generen etiquetas HTML. Usa la sintaxis alternativa de estructuras de control para la vista.
    La capa del controlador, además de encargarse del control de acceso y la interacción con el usuario, realizará las peticiones a la capa modelo (clase DB) para consultar los datos, pasando la información necesaria para que la capa de presentación pueda mostrarlos. Por ejemplo, se obtendrá del modelo un array de objetos de la clase Familia que el controlador pasará a la vista, la cual mostrará en la página el listado de las familias de productos. Igualmente, se obtendrá un array de objetos de la clase Producto para mostrarlos en la página que lista los productos de una determinada familia.
MÉTODOS ESTÁTICOS
    NOMBRECLASE::NOMBREMÉTODO
serialize() / unserialize() -- se puede almacenar en session o bbdd
